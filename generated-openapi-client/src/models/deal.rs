/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: developers@trieve.ai
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Deal {
    #[serde(rename = "active")]
    pub active: bool,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "org_id")]
    pub org_id: String,
    #[serde(rename = "size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub size: Option<Option<f32>>,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl Deal {
    pub fn new(active: bool, created_at: String, id: String, org_id: String, updated_at: String) -> Deal {
        Deal {
            active,
            created_at,
            id,
            name: None,
            org_id,
            size: None,
            updated_at,
        }
    }
}

