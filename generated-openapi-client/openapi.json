{
  "openapi": "3.0.3",
  "info": {
    "title": "Trieve API",
    "description": "Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.",
    "contact": {
      "name": "Trieve Team",
      "url": "https://trieve.ai",
      "email": "developers@trieve.ai"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/devflowinc/actix-web-template/blob/main/LICENSE.txt"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost:8090",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/api/api_key": {
      "post": {
        "tags": [
          "api_key"
        ],
        "summary": "Set User Api Key",
        "description": "Set User Api Key\n\nCreate a new api key for the auth'ed user. Successful response will contain the newly created api key. The api key will have permission level of the auth'ed user who calls this endpoint.",
        "operationId": "create_api_key",
        "requestBody": {
          "description": "JSON request payload to create a new user api key",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKeyReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the api_key for the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApiKeyRespPayload"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          },
          "500": {
            "description": "Service error relating to creating api_key for the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/auth": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "Login\n\nThis will redirect you to the OAuth provider for authentication with email/pass, SSO, Google, Github, etc.",
        "operationId": "login",
        "parameters": [
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "URL to redirect to after successful login",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "inv_code",
            "in": "query",
            "description": "Code sent via email as a result of successful call to send_invitation",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Response that redirects to OAuth provider through a Location header to be handled by browser."
          },
          "400": {
            "description": "OAuth error likely with OIDC provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "Logout\n\nInvalidate your current auth credential stored typically stored in a cookie. This does not invalidate your API key.",
        "operationId": "logout",
        "parameters": [
          {
            "name": "redirect_uri",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that your current auth token has been invalidated. This does not invalidate your API key."
          },
          "401": {
            "description": "The user is already logged out / does not have an account"
          }
        }
      }
    },
    "/api/auth/callback": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "OpenID Connect callback",
        "description": "OpenID Connect callback\n\nThis is the callback route for the OAuth provider, it should not be called directly. Redirects to browser with set-cookie header.",
        "operationId": "callback",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Response that returns with set-cookie header"
          },
          "400": {
            "description": "Email or password empty or incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/whoami": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Currently Auth'ed User",
        "description": "Get Currently Auth'ed User\n\nGet the currently auth'ed user. This will return the user object for the currently auth'ed user.",
        "operationId": "whoami",
        "responses": {
          "200": {
            "description": "JSON body containing the user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the currently auth'ed user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/contacts": {
      "post": {
        "tags": [
          "contacts"
        ],
        "operationId": "create_contact",
        "requestBody": {
          "description": "JSON request payload to create a new contact",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the contact that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/contacts/{contact_id}": {
      "get": {
        "tags": [
          "contacts"
        ],
        "operationId": "get_contact",
        "responses": {
          "200": {
            "description": "JSON object representing the requested contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "contacts"
        ],
        "operationId": "update_contact",
        "requestBody": {
          "description": "JSON request payload to update the contact",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object representing the renamed contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "contacts"
        ],
        "operationId": "delete_contact",
        "parameters": [
          {
            "name": "Contact",
            "in": "header",
            "description": "The contacts id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the contacts was successfully deleted"
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/deals": {
      "post": {
        "tags": [
          "deals"
        ],
        "operationId": "create_deal",
        "requestBody": {
          "description": "JSON request payload to create a new deal",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDealReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the deal that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/deals/{deal_id}": {
      "get": {
        "tags": [
          "deals"
        ],
        "operationId": "get_deal",
        "parameters": [
          {
            "name": "deal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object representing the requested deal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "deals"
        ],
        "operationId": "update_deal",
        "parameters": [
          {
            "name": "deal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to update the deal",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDealReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object representing the renamed deal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "deals"
        ],
        "operationId": "delete_deal",
        "parameters": [
          {
            "name": "Deal",
            "in": "header",
            "description": "The deal id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deal_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the deal was successfully deleted"
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/emails": {
      "post": {
        "tags": [
          "emails"
        ],
        "operationId": "create_email",
        "requestBody": {
          "description": "JSON request payload to create a new email",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the email that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/emails/{email_id}": {
      "get": {
        "tags": [
          "emails"
        ],
        "operationId": "get_email",
        "responses": {
          "200": {
            "description": "JSON object representing the requested email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "emails"
        ],
        "operationId": "update_email",
        "requestBody": {
          "description": "JSON request payload to update the email",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object representing the renamed email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "emails"
        ],
        "operationId": "delete_email",
        "parameters": [
          {
            "name": "Email",
            "in": "header",
            "description": "The email id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the email was successfully deleted"
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health Check",
        "description": "Health Check\n\nConfirmation that the service is healthy",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Confirmation that the service is healthy"
          },
          "400": {
            "description": "Service error relating to overall service health",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/invitation": {
      "post": {
        "tags": [
          "invitation"
        ],
        "summary": "Send Invitation",
        "description": "Send Invitation\n\nInvitations act as a way to invite users to join an organization. After a user is invited, they will automatically be added to the organization with the role specified in the invitation once they set their.",
        "operationId": "post_invitation",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to send an invitation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Ok response. Indicates that invitation email was sent correctly."
          },
          "400": {
            "description": "Invalid email or some other error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "admin"
            ]
          }
        ]
      }
    },
    "/api/invitation/{invitation_id}": {
      "delete": {
        "tags": [
          "invitation"
        ],
        "summary": "Delete Invitation",
        "description": "Delete Invitation\n\nDelete an invitation by id.",
        "operationId": "delete_invitation",
        "parameters": [
          {
            "name": "invitation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response. Indicates that invitation was deleted."
          },
          "400": {
            "description": "Service error relating to deleting invitation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "admin"
            ]
          }
        ]
      }
    },
    "/api/invitation/{organization_id}": {
      "get": {
        "tags": [
          "invitation"
        ],
        "summary": "Get Invitations",
        "description": "Get Invitations\n\nGet all invitations for the organization.",
        "operationId": "get_invitations",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitations for the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invitation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting invitations for the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "admin"
            ]
          }
        ]
      }
    },
    "/api/links": {
      "post": {
        "tags": [
          "links"
        ],
        "operationId": "create_link",
        "requestBody": {
          "description": "JSON request payload to create a new link",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the link that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/links/{link_id}": {
      "get": {
        "tags": [
          "links"
        ],
        "operationId": "get_link",
        "responses": {
          "200": {
            "description": "JSON object representing the requested link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "links"
        ],
        "operationId": "update_link",
        "requestBody": {
          "description": "JSON request payload to update the link",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLinkReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object representing the renamed link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "links"
        ],
        "operationId": "delete_link",
        "parameters": [
          {
            "name": "Link",
            "in": "header",
            "description": "The link id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the link was successfully deleted"
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/notes": {
      "get": {
        "tags": [
          "notes"
        ],
        "operationId": "get_notes_for_org",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results. Default is 10",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the results. Default is 0",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of organizations the user belongs to",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Org"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "notes"
        ],
        "operationId": "create_note",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to create a new note",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNoteReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the note that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/notes/{note_id}": {
      "get": {
        "tags": [
          "notes"
        ],
        "operationId": "get_note_by_id",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The id of the organization you want to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object representing the requested note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "notes"
        ],
        "operationId": "update_note",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The id of the note you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to rename the organization",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoteReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object representing the renamed note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "notes"
        ],
        "operationId": "delete_note",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "The id of the note you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the note was successfully deleted"
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/orgs": {
      "get": {
        "tags": [
          "orgs"
        ],
        "operationId": "get_orgs_for_authed_user",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results. Default is 10",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the results. Default is 0",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of organizations the user belongs to",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Org"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "orgs"
        ],
        "operationId": "create_org",
        "requestBody": {
          "description": "JSON request payload to create a new organization",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the organization that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/orgs/leave/{org_id}": {
      "delete": {
        "tags": [
          "orgs"
        ],
        "operationId": "leave_org",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "org_id",
            "in": "path",
            "description": "The id of the organization you want to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the user has left the organization"
          },
          "400": {
            "description": "Error indicating that an owner can't leave an organization that they own",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/orgs/{org_id}": {
      "put": {
        "tags": [
          "orgs"
        ],
        "operationId": "update_org",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "org_id",
            "in": "path",
            "description": "The id of the organization you want to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to rename the organization",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object representing the renamed organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "orgs"
        ],
        "operationId": "delete_org",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "org_id",
            "in": "path",
            "description": "The id of the organization you want to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the organization was successfully deleted"
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/phones": {
      "post": {
        "tags": [
          "phones"
        ],
        "operationId": "create_phone",
        "requestBody": {
          "description": "JSON request payload to create a new phone",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the phone that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/phones/{phone_id}": {
      "get": {
        "tags": [
          "phones"
        ],
        "operationId": "get_phone",
        "responses": {
          "200": {
            "description": "JSON object representing the requested phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "phones"
        ],
        "operationId": "update_phone",
        "requestBody": {
          "description": "JSON request payload to update the phone",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object representing the altered phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "phones"
        ],
        "operationId": "delete_phone",
        "parameters": [
          {
            "name": "Phone",
            "in": "header",
            "description": "The phone id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the phone was successfully deleted"
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/tasks": {
      "post": {
        "tags": [
          "tasks"
        ],
        "operationId": "create_task",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to create a new task",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the task that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to the request payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/tasks/{task_id}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "operationId": "get_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "description": "The task id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object representing the requested task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "tasks"
        ],
        "operationId": "update_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "description": "The task id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to update the task",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object representing the updated task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to the request payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "operationId": "delete_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "description": "The task id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the task was successfully deleted"
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CreateApiKeyReqPayload": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name which will be assigned to the new api key."
          }
        }
      },
      "CreateApiKeyRespPayload": {
        "type": "object",
        "required": [
          "api_key"
        ],
        "properties": {
          "api_key": {
            "type": "string",
            "description": "The api key which was created. This is the value which should be used in the Authorization header."
          }
        }
      },
      "CreateContactReqPayload": {
        "type": "object",
        "required": [
          "first_name",
          "last_name"
        ],
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        }
      },
      "CreateDealReqPayload": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        }
      },
      "CreateEmailReqPayload": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "CreateLinkReqPayload": {
        "type": "object",
        "required": [
          "link"
        ],
        "properties": {
          "link": {
            "type": "string"
          }
        }
      },
      "CreateNoteReqPayload": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string"
          }
        }
      },
      "CreateOrgReqPayload": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "CreatePhoneReqPayload": {
        "type": "object",
        "required": [
          "number"
        ],
        "properties": {
          "number": {
            "type": "string"
          }
        }
      },
      "CreateTaskReqPayload": {
        "type": "object",
        "properties": {
          "contact_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrefixedUuid"
              }
            ],
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "example": "2021-01-01T00:00:00",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorRespPayload": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Bad Request"
        }
      },
      "Invitation": {
        "type": "object",
        "required": [
          "id",
          "email",
          "organization_id",
          "used",
          "created_at",
          "updated_at",
          "role"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_id": {
            "$ref": "#/components/schemas/PrefixedUuid"
          },
          "role": {
            "type": "integer",
            "format": "int32"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "used": {
            "type": "boolean"
          }
        }
      },
      "InvitationData": {
        "type": "object",
        "required": [
          "organization_id",
          "user_role",
          "email",
          "app_url",
          "redirect_uri"
        ],
        "properties": {
          "app_url": {
            "type": "string",
            "description": "The url of the app that the user will be directed to in order to set their password. Usually admin.trieve.ai, but may differ for local dev or self-hosted setups."
          },
          "email": {
            "type": "string",
            "description": "The email of the user to invite. Must be a valid email as they will be sent an email to register."
          },
          "organization_id": {
            "$ref": "#/components/schemas/PrefixedUuid"
          },
          "redirect_uri": {
            "type": "string",
            "description": "The url that the user will be redirected to after setting their password."
          },
          "user_role": {
            "type": "integer",
            "format": "int32",
            "description": "The role the user will have in the organization. 0 = User, 1 = Admin, 2 = Owner."
          }
        }
      },
      "InvitationResponse": {
        "type": "object",
        "required": [
          "registration_url"
        ],
        "properties": {
          "registration_url": {
            "type": "string"
          }
        }
      },
      "Note": {
        "type": "object",
        "required": [
          "id",
          "title",
          "body",
          "org_id",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "$ref": "#/components/schemas/PrefixedUuid"
          },
          "org_id": {
            "$ref": "#/components/schemas/PrefixedUuid"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "body": "Note contents...",
          "created_at": "2021-01-01T00:00:00",
          "id": "note-b8b8b8b8-b8b8-b8b8-b8b8-b8b8b8b8b8b8",
          "org_id": "org-b8b8b8b8-b8b8-b8b8-b8b8-b8b8b8b8b8b8",
          "title": "My Note Title",
          "updated_at": "2021-01-01T00:00:00"
        }
      },
      "Org": {
        "type": "object",
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "$ref": "#/components/schemas/PrefixedUuid"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "created_at": "2021-01-01T00:00:00",
          "id": "e3e3e3e3-e3e3-e3e3-e3e3-e3e3e3e3e3e3",
          "name": "Trieve Team",
          "updated_at": "2021-01-01T00:00:00"
        }
      },
      "PrefixedUuid": {
        "type": "string"
      },
      "Task": {
        "type": "object",
        "required": [
          "id",
          "org_id"
        ],
        "properties": {
          "contact_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrefixedUuid"
              }
            ],
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/PrefixedUuid"
          },
          "org_id": {
            "$ref": "#/components/schemas/PrefixedUuid"
          }
        },
        "example": {
          "contact_id": "contact-c7c7c7c7-c7c7-c7c7-c7c7-c7c7c7c7c7c7",
          "deadline": "2021-01-01T00:00:00",
          "description": "Task description...",
          "id": "task-c7c7c7c7-c7c7-c7c7-c7c7-c7c7c7c7c7c7",
          "org_id": "org-b8b8b8b8-b8b8-b8b8-b8b8-b8b8b8b8b8b8"
        }
      },
      "UpdateContactReqPayload": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateDealReqPayload": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        }
      },
      "UpdateEmailReqPayload": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateLinkReqPayload": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateNoteReqPayload": {
        "type": "object",
        "required": [
          "body"
        ],
        "properties": {
          "body": {
            "type": "string"
          }
        }
      },
      "UpdateOrgReqPayload": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdatePhoneReqPayload": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateTaskReqPayload": {
        "type": "object",
        "properties": {
          "contact_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrefixedUuid"
              }
            ],
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "example": "2021-01-01T00:00:00",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "email",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/PrefixedUuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "created_at": "2021-01-01T00:00:00",
          "email": "developers@trieve.ai",
          "id": "e3e3e3e3-e3e3-e3e3-e3e3-e3e3e3e3e3e3",
          "name": "Trieve Team",
          "updated_at": "2021-01-01T00:00:00"
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints. Used to authenticate users."
    },
    {
      "name": "invitation",
      "description": "Invitation endpoint. Exists to invite users to an organization."
    },
    {
      "name": "orgs",
      "description": "Organization endpoints. Used to manage organizations"
    },
    {
      "name": "deals",
      "description": "Deal endpoints. Used to manage deals"
    },
    {
      "name": "notes",
      "description": "Note endpoints. Used to manage notes"
    },
    {
      "name": "api_key",
      "description": "API Key endpoints. Used to manage user API keys."
    },
    {
      "name": "health",
      "description": "Health check endpoint. Used to check if the server is up and running."
    },
    {
      "name": "links",
      "description": "Link endpoints. Used to manage links"
    },
    {
      "name": "emails",
      "description": "Email endpoints. Used to manage emails"
    },
    {
      "name": "phones",
      "description": "Phone endpoints. Used to manage phones"
    },
    {
      "name": "tasks",
      "description": "Task endpoints. Used to manage tasks"
    }
  ]
}
